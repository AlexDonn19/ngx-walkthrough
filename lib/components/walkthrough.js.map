{"version":3,"names":[],"mappings":"","sources":["components/walkthrough.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, Input, Output, HostListener, ElementRef, EventEmitter } from '@angular/core';\nimport { WalkthroughTapIconsPath } from './ngWalkthroughTapIconsPath';\nvar WalkthroughComponent = (function () {\n    function WalkthroughComponent(element) {\n        this.element = element;\n        this.useButton = false;\n        this.hasGlow = false;\n        this.isRound = false;\n        this._focusElementSelector = null;\n        this.onWalkthroughShowEvent = new EventEmitter();\n        this.onWalkthroughHideEvent = new EventEmitter();\n        this.onWalkthroughContentClickedEvent = new EventEmitter();\n        this.DOM_WALKTHROUGH_CLASS = \"walkthrough-background\";\n        this.DOM_WALKTHROUGH_TRANSPARENCY_TEXT_CLASS = \".walkthrough-text\";\n        this.DOM_WALKTHROUGH_TIP_TEXT_CLASS = \".walkthrough-tip-text-box\";\n        this.DOM_WALKTHROUGH_HOLE_CLASS = \".walkthrough-hole\";\n        this.DOM_WALKTHROUGH_TRANSPARENCY_ICON_CLASS = \".walkthrough-icon\";\n        this.DOM_WALKTHROUGH_TIP_ICON_CLASS = \".walkthrough-tip-icon-text-box\";\n        this.DOM_WALKTHROUGH_ARROW_CLASS = \".walkthrough-arrow\";\n        this.DOM_WALKTHROUGH_DONE_BUTTON_CLASS = \"walkthrough-done-button\";\n        this.DOM_TRANSCLUDE = \"walkthrough-transclude\";\n        this.BUTTON_CAPTION_DONE = \"Got it!\";\n        this.PADDING_HOLE = 5;\n        this.PADDING_ARROW_START = 5;\n        this.PADDING_ARROW_MARKER = 25;\n        this.ngWalkthroughTapIcons = new WalkthroughTapIconsPath();\n        this.boolean = false;\n        this.close_icon = \"data:image/png;base64,\" +\n            \"iVBORw0KGgoAAAANSUhEUgAAAG4AAABuCAYAAADGWyb7AAAAAXNSR0IArs4c6QAAAAlwSFlzAAAL\" +\n            \"EwAACxMBAJqcGAAABCZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6\" +\n            \"eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYg\" +\n            \"eG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4K\" +\n            \"ICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlm\" +\n            \"Zj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOmV4aWY9\" +\n            \"Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0\" +\n            \"cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0\" +\n            \"cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0\" +\n            \"PjE8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjU8L3Rp\" +\n            \"ZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhSZXNv\" +\n            \"bHV0aW9uPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgog\" +\n            \"ICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAg\" +\n            \"PGV4aWY6UGl4ZWxYRGltZW5zaW9uPjExMDwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAg\" +\n            \"IDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhl\" +\n            \"bFlEaW1lbnNpb24+MTEwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAgPGRjOnN1Ympl\" +\n            \"Y3Q+CiAgICAgICAgICAgIDxyZGY6U2VxLz4KICAgICAgICAgPC9kYzpzdWJqZWN0PgogICAgICAg\" +\n            \"ICA8eG1wOk1vZGlmeURhdGU+MjAxNTowNzowNSAyMTowNzo0NzwveG1wOk1vZGlmeURhdGU+CiAg\" +\n            \"ICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+UGl4ZWxtYXRvciAzLjIuMTwveG1wOkNyZWF0b3JUb29s\" +\n            \"PgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K36AZ\" +\n            \"FwAAETZJREFUeAHtnWuMVdUZhvcMMBeRQXGmSrVemqaUHyUabERIoWhQE02alKYk+qdNS38Apoht\" +\n            \"YiwQo3hJEwaVgm3AWmM0ATvxR5tGodSMSVtsQGlrSjFNtVYFC1IHEZgZZk7fZ3v2zN5nX9ba5+xz\" +\n            \"G/aXLPZl3d93f2t961vrDI6TS1Mi0NKUrXacNrW7XWFKMUzWlTBJgT61Fq+6OAWF0eJ1RNezxTCs\" +\n            \"K2FQYUihqaQZiIOETl/o0H3W7YbcMwqnfQGyG1ayBiCrjqI95xcDpNW6nRAJiScVPlZAUxtKag1I\" +\n            \"UudpyzSFLoXzkhLWOA4SP1E4UbzyXHdpBOLQrgsVIIw5qpEFzYPA/ykwV9ZN6kkchsVFCmhZPdtR\" +\n            \"DvhoHUPohwoYODWXegCGhkEYGlaP+rMEGQLRQAisqQbWEjjqYkicoYClOJEEC/S4AkNoTebAWhGH\" +\n            \"ZXixAuuviSysBz9QwCKtqlSbOMrvVkDTspK21tbWRW1tbYtU4OyWlhbK7ywUCm26n6SANvs1elRx\" +\n            \"aAHXEcUzJ53W/TFdDw4NDfWPjo726z7LRTiaR/lV075qEodn4xIFrpXK9Z2dnUtVyNzh4eGekZGR\" +\n            \"KZ9yUWmxmmRbWpxJkyYNT5ky5ahK23/69Ok+Xf9UecmuR+aIysEzk7lUizgsRYZG/5eftvFf6ujo\" +\n            \"WCFtmCeypmdFlKkRECkSB6TVe8+cObNV6f9hypMQz9zH0IkFmqlUg7getbDsobG9vf1GacCawcHB\" +\n            \"z0uzKiG+YqDUjlG1519qR6/as6eCAhk60ejMJEviKIuhEW1LLQLoZgF1t77yy6VlWbYrdVtKM0j7\" +\n            \"CtL+d0TgRhH4Umm85TPus8MKmcx7WQGEZlyqgPWYSgTIQhG2VnPLFSIsVd5aJxaBjubaf4vADfrA\" +\n            \"XimjfqzN9xQq7mgWxOGmgjS89mmkRyD0yqr7ioDIoh1p6q4orT60gqzaffrY7lJBaYdAdiEgryLH\" +\n            \"daWAoWmXKaQiTcPiKmnXchkdqfKpnoYSGTFnpIXbNHz+NGXDIO9dhbI1rxLiyAtpaYbHLmnZkxpm\" +\n            \"5tTKSlT7qipYoRru/yrt+64qwv1lKwybkFfWnFeJN36mKp1q20oNL/M0vDwn0q6wzdMs6c6ePXux\" +\n            \"RpFvqb1v6IOEDBvByc4at6ylQrnE4a24wKZ1pJGWfUMd2qT5zJpo27IbJZ3m6Y7JkyffJgKPiMiD\" +\n            \"lu3CBcjIdcoy/ViycojD3P/MWAmGm6lTp35bc9k6BXYFJrRo3sbltlgf6ifq7wHLzjLV4G5L5XJL\" +\n            \"SxxfCPOa1dw4ffr072lo/JE6kbYeVdGcIvIw2BZMmzZNNsvga5a94JgG6zxrSzMNoJ4xYqU5Im35\" +\n            \"qVOnfijS6Mg5JSKvRWF+CvLAFs2zNm7SEIcriy/DKAyPRU0750jzwCmSNy/FsIlCgJfVfGdLHF8D\" +\n            \"TmOjYIhIy5jTbMs2ltmsCSBPbZ8vg+WwpcECzhBn3E23AZfK8YwY08rkv07W46MizWo4VZkTXkRe\" +\n            \"qwyWRQqvWS4VIG/ABIzNUIan32bnukuehMdEGuuTXHwIgInkUb3inI1JwNq4u2IiDs3hjIhRNBxs\" +\n            \"07xmrNBY0ARNADaaRrZZdg/ME0ct0/CHQYLqJopIW6XF9dcTE+WRjhbplwgrrn82wMH0hFJxEDdS\" +\n            \"kjSOIc9GtXs0di9XiKwgfzmOABgpfF9vUAiTgH3stJNEHGcfYT5RpP6PStua2suf2MGMI4VVu5ZL\" +\n            \"my2KBXs4iJQ44hhfjTvZ8oovUkPmRpacv4xFQPPd1cLua7EJxiPgIHKuiyMOI8OobexcN9sm6Dgm\" +\n            \"9bsDM2H3Y4sWwEGkwRdFHImNc5uGyNu0B3W5ReV5kggEwA4MI6JKX8FFSImiiEM9Tdamo53fNVpc\" +\n            \"llaSP1siAHZgaJEcLkLTVhRxRm2TSXuzvhi8KblUgAAYgqVFESFOSoljIjT+qFDj8w9ybbOA25AE\" +\n            \"DMHSkIxoOAkYKaXE2Xj/Z2uf6SqLyvIkFggUsZxtkTTATWriZMaulFVUms+i3jxJFAJgCaZRcSXv\" +\n            \"YomDDKN7S+p9XUmB+WOFCFhiCjdjCjN2o5dEhMxOf5s0Hs/XvlJoovSnye/TIwCmYGvICTdjilVK\" +\n            \"XGJeWUDfnGhGCcfKBVpiv6sdCaZga1FPecTJQdoQ7i2ArhRsCLvllluc559/3tm+fbt7bwFc1ZJY\" +\n            \"YjtGnN/ENDmK27QhGOv0rFqPSgoG7GXLljldXV1OX1+fs3PnTkdDTUmq5EdtajqrVq1yent7Awl3\" +\n            \"797NlkvgXa0eitiyiZp0TC/EERm+mBT0ha7U9jt7N3UL0rLCU089pY9zXDZu3FiQ68i6TTpNXVi3\" +\n            \"bt14AcU7fQQFyq9X/8AWjJM4KMbB1ZiVwlHoRNFXulh9TExT7UjqR9P8smbNGmfz5s3OeecZ/QaO\" +\n            \"SHPuvfde5/777/cX4d6jvfXSNhpA38A41LDwiwBXbJUnapyAeYPy6x00VBZ1JHh55plnCjrHGNs+\" +\n            \"Tf6FDRs2BDMVn9BaHR+PzVurPhcxTuRBbQkcJeHoXWIGDUdHatWBpHo0nBRWr14dScCuXbsKM2fO\" +\n            \"DBEgLS1s2bIlMo8Mk1RDbVLbKo0rYpzIg+oIHJPEYZyYQav7gUobllV+DSmR8xTMHD16tHDTTTcV\" +\n            \"enp63DBr1qzCnj17IkljvtRXHiI6q3amLaeIcSIPKtN17nsLGDbr/BamHoMisFbJektME8xRvSfW\" +\n            \"PXv37nX/1MXChQsDFTHX3XHHHa6lSbrHH3/cWbBgQSAND88++6yzYsUKR8fkQ3H1esFwLYx/Zqif\" +\n            \"vTSUyBWcxolMCxDM1Ib5OmkL81bcEChDo3Do0KFITWNITZoP69VPadywiQfFw9WYi+sLuvd7UYgL\" +\n            \"iIj7u75OT0MDcfV8wMp84YUXnBtuuMGqGceOHXPmzJnjHD582Cp9LRPJ6h3VGZ5rVCc/NY4TNO6f\" +\n            \"iWSV5MRX1nBy4sQJd8jbt2+fsW0MnQyjjUgajVf7wNjqB6Mecd41tvNaIBrTxGaucsTx48ed++67\" +\n            \"z0kiD9IeeeQR5/XXX69ya8ovXuM6xAW2byJKc3loWDIiGpy/8iHgEWc89aOvwZjGV25Nb2fMmOFq\" +\n            \"3LXXXhtbL07le+65x7nmGqaQxpSiS5FfpiaJy4NHXFJCLw6LsuEE42Tr1q1OEmleoyGPZYAW6d6r\" +\n            \"hrriXFCDPrJplEec0SXeiBqn5YDz8MMPR1qUzGlvvvlmCIPu7m7n6aefdrQcCMXV+4WIQ5uSLEqa\" +\n            \"6HKVhjgjubXsOA7jtWvXuhZlab2eIYIDOspgWbJkifPEE084OsNfmrXezzb7UwEecpdXAzgX0ri8\" +\n            \"vC8sdzI3AHHlOJnzbZ0m3dZhpk70Vepr6FOauvoqsbrYqS4VtmZsvPzsfmuhXprdfb799tvr2jew\" +\n            \"lbH1KxMPinetKs84Mf7BZ524/b3WGcpXP6F+XFx+4dzInXfeaeXllx/Qeeihh5z169f7i3Dvly5d\" +\n            \"WvEBpFChKV7QN507edkii8uVt02D5x9T1CMylF+WWr+2HYa17RD789ZQpoxfcLRgx44dbqms38o5\" +\n            \"LAR5uL5OnjwZOCxU+kFk3HRjcTrletb9hoRw5B4m8qvQ5/Ry7PhXVAEaLvv1C5NLouJq+c47mlfJ\" +\n            \"GREW49pwdZYvX+5qMR/Eiy++WMtuBOrCMBG2iwIvww+n9eo/vPYT163nwHkGEvhF80ivtnZu9b9r\" +\n            \"9nsIZJiq5CPIAgNh+1the5ehrOOKP0Ya/9AIm4miea6Pjk4kYbFeb9LAVNhimJhkjCM/C7zEsooV\" +\n            \"dfAPOsIQtA5iU+cRtgiAKdga0sNNJHFMfGMRcYVofnk1Li5/Xx4ClpjCDRy54tc4Xpi2FDC7t6ii\" +\n            \"sQI+LSb/t1wEwBJMLfIHuElNnCo4qIXiWxYV5UksEChiedAiaSJxeKeN59U0Hj820YwUC+AyTwKG\" +\n            \"YGlRcOhvWJZqHGUMmAqSBfSS1h3vmdLl8ckICMP3wTI5lRsb4iSKOFQysOcTVbDM6E251kUhY/cO\" +\n            \"7IRh8Hde0VnhIjBMkiyKOMxOo8mvVf6vtWh0V/EUlEs6BMAODC1ywUVomRZFHGXx/52FEhPhF/nW\" +\n            \"HpBVZEznz5Pf6882CTM5lB+0wAJs4SIkccRhpHwcSl3yQn8Frl9W0f6S1/mjAQHtdP9Fc9vLhmRE\" +\n            \"w0HkcQa/r7K0HHYBrlRISkOeHu1z/U5e99DPXInMJYiAsBoUVjfq7dFgTOgJbXtbgd8ThCRO40hI\" +\n            \"BuNcpzRH5aR9EkdtLskIgJGGye1glpzSjQX7SNKINaHNft2VCkkEK1r7QZ2dOzTZXu0+5P9EIiCM\" +\n            \"DgijZZGRwZd4pt5WiBwmSWoijjQzFLq5MUiX5rvdGrutfrRgKGvCRQubj4TNEnXMZhRj64YtnFgx\" +\n            \"apJyYtW4u66xpXwacULrktXydMeqtyH/hI0GE7BRB21IA+tIS9IPkO3v3TjnMN2fMepejXtXX9YR\" +\n            \"jeWLdW/zUUQVM6HeibQRHflYJ23bbdkxPFKxQ6RXhi1xFAQRiUcbKFRru4Mydzn//lWRZzMUk21C\" +\n            \"ikgbVXhQ89pOyw6iaTZaaf4Tvr4K2Q86X8E7YOSLCt5qcfk3nc0fEnHXn6vkiTCODPbqUNIvg+jE\" +\n            \"PjGqWf9M1lbjvNogj78QY9QkDQ2vFcmbd66Rh6aJtE0DAwPbPOAMV6xIhkijj9grJy1xFIzx4R7K\" +\n            \"9AqJu4q8/fphxSmdOJ1/rpAHaZoqfqLjfk/G4RLxnr8hg1JYS1riKBirB40zzndu4qGhA/IWYLAs\" +\n            \"FHnl1EcxTSEibVgL7PXa0X4uRYMx+7EJUkm5QLKxh0us3aY2DBZ16IA6tlgbhxPSNSZrekAjy0q5\" +\n            \"s3bZYFJMgyHy3xTpx5Ia56qxlOEb8l6qYP7rZ+N5+Q/cfyHn9JfVyfG3TXyHG0t9ekNa9h11w8oi\" +\n            \"LHaXj595rSwgytW4Yt3uBh/EGS3NYoZBad9OfZ2t0sA50j7bfF59DXXVFHBGa7Sf60O8Ww1zz/Rb\" +\n            \"NpBfnZZNGnVUonFeG1nfXaaQdgjs0ZfK/4Q1VwRm0Q6vPVW/6qMriLT9Wp/hDbFxGPvbBGnvKlR0\" +\n            \"Ui4rwCDvswpphk0lF9sdHQsFxDqBcLmMF/ddo/7DcQN9bO/oQ3tAWvZKGe1keHxfoeKOZkUcfaAs\" +\n            \"fhBitVQgg18EyG0CZo0IvLTRCCwS9p7a1av2/cbf7hT3bIpi9pc1p5XWkyVxXtnsJMzwHtJeNf8t\" +\n            \"kQbepTXgVfqy0eS6idoxqva8pXZsSuFrjGovJr/7Y42oyHLeVYM42oHWXaxQCfCz5X1YKWPmOoWu\" +\n            \"Wmkh2iWD44TCq8UTxgfpUJnCkPiBgvEYSNryq0Uc7WhTmKlgtdYjQ5zoy+c/QV+qJcRc+UG7pQFT\" +\n            \"slpOFHel+f+ej+l+vzSrT+X/Ma4tKd57vkccFplLNYmjsZTP0HkhDxlJm7Rikaw6/lP0WSKwW9ep\" +\n            \"urbryn+WzhJHl5ZWveOL18VdNI7wrPdDun6i6zFdD8mq7Zc29ytdlgDj5WdozGQ+UzkhqTZxXoUs\" +\n            \"FRg6K9Y+r8AGvaJlDI2Y/FWVWhFHJ6jrAoWLFCqZ+5S94QTN/lABn2PVtMzf61oS59WLtwSrkx31\" +\n            \"etTvtSOLKyRxrh+r0bhrnUWFXhn1BA4CmfsgsNk0EA2DMOaymhKm+lypJ3FeGzAmPAIr9Z16ZVbr\" +\n            \"yn6kR5j1pmc1GtMIxHn9oi0cjUADU7vOvEKqcGU4PKmA5x+XVU3mMNWTKI1EnL+haB6LeIhkw7bW\" +\n            \"7YQcdqRZOBMYGhtKag1IOZ2njWggBLKsIGQ9J0IMJjwBwhpGs9SWSGkG4qIa7u2+c/UCWkrwSPXm\" +\n            \"S28ughzuCZyb8QJrL+5zyRGoPgL/B+Nop/F9kw+nAAAAAElFTkSuQmCC\";\n    }\n    Object.defineProperty(WalkthroughComponent.prototype, \"focusElementSelector\", {\n        get: function () {\n            return this._focusElementSelector;\n        },\n        set: function (focusElementSelector) {\n            if ((!this._focusElementSelector || focusElementSelector !== this._focusElementSelector) && this.isVisible) {\n                this._focusElementSelector = focusElementSelector;\n                this.setFocusOnElement();\n            }\n            else {\n                this._focusElementSelector = focusElementSelector;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WalkthroughComponent.prototype, \"isActive\", {\n        set: function (isActive) {\n            var _this = this;\n            if (isActive) {\n                this.setWalkthroughElements();\n                this.isVisible = true;\n                try {\n                    if (this.focusElementSelector) {\n                        this.setFocusOnElement();\n                    }\n                }\n                catch (e) {\n                    console.warn('failed to focus on element prior to timeout: ' + this.focusElementSelector);\n                }\n                if (this.focusElementSelector) {\n                    setTimeout(function () {\n                        _this.setFocusOnElement();\n                    }, 100);\n                }\n                this.onWalkthroughShowEvent.emit();\n            }\n            else {\n                this.isVisible = false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WalkthroughComponent.prototype.onResize = function (event) {\n        if (this.isVisible) {\n            this.resizeHandler();\n        }\n    };\n    WalkthroughComponent.prototype.resizeHandler = function () {\n        if (this.focusElementSelector && this.isVisible) {\n            this.setFocusOnElement();\n        }\n    };\n    WalkthroughComponent.prototype.setWalkthroughElements = function () {\n        var _this = this;\n        var holeElements = this.element.nativeElement.querySelectorAll(this.DOM_WALKTHROUGH_HOLE_CLASS);\n        this.walkthroughHoleElements = holeElements[0];\n        var textClass = (this.walkthroughType === \"tip\") ? this.DOM_WALKTHROUGH_TIP_TEXT_CLASS : this.DOM_WALKTHROUGH_TRANSPARENCY_TEXT_CLASS;\n        this.walkthroughTextElement = this.element.nativeElement.querySelectorAll(textClass)[0];\n        var iconClass = (this.walkthroughType === \"tip\") ? this.DOM_WALKTHROUGH_TIP_ICON_CLASS : this.DOM_WALKTHROUGH_TRANSPARENCY_ICON_CLASS;\n        this.walkthroughIconElement = this.element.nativeElement.querySelectorAll(iconClass)[0];\n        this.walkthroughArrowElement = this.element.nativeElement.querySelectorAll(this.DOM_WALKTHROUGH_ARROW_CLASS)[0];\n        setTimeout(function () {\n            _this.closeIcon = _this.close_icon;\n        }, 100);\n        this.walkthroughIcon = this.getIcon(this.walkthroughIconWanted);\n        this.buttonCaption = this.buttonCaption || this.BUTTON_CAPTION_DONE;\n        if (this.hasBackdrop === undefined) {\n            this.hasBackdrop = (this.walkthroughType !== \"tip\");\n        }\n    };\n    WalkthroughComponent.prototype.ngAfterViewChecked = function () {\n        var translude = this.element.nativeElement.querySelectorAll('.' + this.DOM_TRANSCLUDE);\n        if (translude.length > 0 && translude[0].children.length > 0) {\n            this.hasTransclude = true;\n        }\n    };\n    WalkthroughComponent.prototype.getIcon = function (icon) {\n        var retval = null;\n        if (this.ngWalkthroughTapIcons) {\n            switch (icon) {\n                case (\"single_tap\"):\n                    retval = this.ngWalkthroughTapIcons.single_tap;\n                    break;\n                case (\"double_tap\"):\n                    retval = this.ngWalkthroughTapIcons.double_tap;\n                    break;\n                case (\"swipe_down\"):\n                    retval = this.ngWalkthroughTapIcons.swipe_down;\n                    break;\n                case (\"swipe_left\"):\n                    retval = this.ngWalkthroughTapIcons.swipe_left;\n                    break;\n                case (\"swipe_right\"):\n                    retval = this.ngWalkthroughTapIcons.swipe_right;\n                    break;\n                case (\"swipe_up\"):\n                    retval = this.ngWalkthroughTapIcons.swipe_up;\n                    break;\n                case (\"arrow\"):\n                    retval = \"\";\n                    break;\n            }\n        }\n        if (retval === null && icon && icon.length > 0) {\n            retval = icon;\n        }\n        else {\n            this.toDataURL(retval).then(function (dataUrl) {\n                retval = dataUrl;\n                console.log(\"icon :\", retval);\n            });\n        }\n        return retval;\n    };\n    WalkthroughComponent.prototype.toDataURL = function (url) {\n        return fetch(url)\n            .then(function (response) { return response.blob(); })\n            .then(function (blob) {\n            return new Promise(function (resolve, reject) {\n                var reader = new FileReader();\n                reader.onloadend = function () {\n                    resolve(reader.result);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                };\n            });\n        });\n    };\n    WalkthroughComponent.prototype.setArrowAndText = function (pointSubjectLeft, pointSubjectTop, pointSubjectWidth, pointSubjectHeight, paddingLeft) {\n        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughTextElement);\n        var startLeft = offsetCoordinates.left + offsetCoordinates.width / 2;\n        var startTop = offsetCoordinates.top + offsetCoordinates.height + this.PADDING_ARROW_START;\n        var endLeft = 0;\n        var isLine = false;\n        if (Math.abs(startLeft - (pointSubjectLeft + pointSubjectWidth / 2)) < 10) {\n            console.warn(\"Hole element and text are inline line arrow will be used\");\n            endLeft = pointSubjectLeft + pointSubjectWidth / 2;\n            isLine = true;\n        }\n        else if (startLeft > pointSubjectLeft) {\n            endLeft = pointSubjectLeft + paddingLeft + pointSubjectWidth;\n        }\n        else if (startLeft < pointSubjectLeft) {\n            endLeft = pointSubjectLeft - paddingLeft;\n        }\n        var endTop;\n        if (isLine) {\n            endTop = pointSubjectTop - this.PADDING_ARROW_MARKER;\n        }\n        else {\n            endTop = pointSubjectTop + (pointSubjectHeight / 2);\n        }\n        var arrowLeft, arrowRight, arrowTop, arrowBottom;\n        arrowLeft = (startLeft < endLeft) ? startLeft : endLeft;\n        arrowRight = (startLeft < endLeft) ? endLeft : startLeft;\n        arrowTop = (startTop < endTop) ? startTop : endTop;\n        arrowBottom = (startTop < endTop) ? endTop : startTop;\n        if (this.forceCaptionLocation === undefined && this.isItemOnText(arrowLeft, arrowTop, arrowRight, arrowBottom)) {\n            this.forceCaptionLocation = \"BOTTOM\";\n        }\n        if (this.forceCaptionLocation === \"BOTTOM\") {\n            if (isLine) {\n                endTop = pointSubjectTop + pointSubjectHeight + this.PADDING_ARROW_MARKER;\n            }\n            startTop = offsetCoordinates.top - this.PADDING_ARROW_START;\n        }\n        var arrowSvgDom;\n        if (isLine) {\n            arrowSvgDom =\n                '<svg width=\"100%\" height=\"100%\">' +\n                    '<defs>' +\n                    '<marker id=\"arrow\" markerWidth=\"13\" markerHeight=\"13\" refx=\"2\" refy=\"6\" orient=\"auto\">' +\n                    '<path d=\"M2,1 L2,10 L10,6 L2,2\" style=\"fill:#fff;\" />' +\n                    '</marker>' +\n                    '</defs>' +\n                    '<line x1=' + endLeft + \" y1=\" + startTop + \" x2=\" + endLeft + \" y2=\" + endTop + \" \" +\n                    'style=\"stroke:#fff; stroke-width: 2px; fill: none;' +\n                    'marker-end: url(#arrow);\"/>' +\n                    '/>' +\n                    '</svg>';\n        }\n        else {\n            arrowSvgDom =\n                '<svg width=\"100%\" height=\"100%\">' +\n                    '<defs>' +\n                    '<marker id=\"arrow\" markerWidth=\"13\" markerHeight=\"13\" refx=\"2\" refy=\"6\" orient=\"auto\">' +\n                    '<path d=\"M2,1 L2,10 L10,6 L2,2\" style=\"fill:#fff;\" />' +\n                    '</marker>' +\n                    '</defs>' +\n                    '<path d=\"M' + startLeft + ',' + startTop + ' Q' + startLeft + ',' + endTop + ' ' + endLeft + ',' + endTop + '\"' +\n                    'style=\"stroke:#fff; stroke-width: 2px; fill: none;' +\n                    'marker-end: url(#arrow);\"/>' +\n                    '/>' +\n                    '</svg>';\n        }\n        var arrowElement = this.element.nativeElement.querySelector(this.DOM_WALKTHROUGH_ARROW_CLASS);\n        if (arrowElement.children.length > 0) {\n            arrowElement.children[0].remove();\n        }\n        arrowElement.insertAdjacentHTML(\"afterbegin\", arrowSvgDom);\n    };\n    WalkthroughComponent.prototype.isItemOnText = function (iconLeft, iconTop, iconRight, iconBottom) {\n        var holeCoordinates = this.getOffsetCoordinates(this.walkthroughHoleElements);\n        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughTextElement);\n        var holeLeft = holeCoordinates.left;\n        var holeRight = holeCoordinates.left + holeCoordinates.width;\n        var holeTop = holeCoordinates.top;\n        var holeBottom = holeCoordinates.top + holeCoordinates.height;\n        var textLeft = document.body.clientWidth / 4;\n        var textRight = document.body.clientWidth / 4 * 3;\n        var textTop = offsetCoordinates.top;\n        var textBottom = offsetCoordinates.top + offsetCoordinates.height;\n        if (!(holeRight < textLeft ||\n            holeLeft > textRight ||\n            holeBottom < textTop ||\n            holeTop > textBottom)) {\n            return true;\n        }\n        return !(iconRight < textLeft ||\n            iconLeft > textRight ||\n            iconBottom < textTop ||\n            iconTop > textBottom);\n    };\n    ;\n    WalkthroughComponent.prototype.getOffsetCoordinates = function (focusElement) {\n        var width;\n        var height;\n        var left;\n        var top;\n        width = focusElement.offsetWidth;\n        height = focusElement.offsetHeight;\n        left = focusElement.getBoundingClientRect().left;\n        top = focusElement.getBoundingClientRect().top;\n        var sameAncestorForFocusElementAndWalkthrough = this.getSameAncestor(focusElement);\n        while (sameAncestorForFocusElementAndWalkthrough) {\n            left = left - sameAncestorForFocusElementAndWalkthrough.offsetLeft;\n            top = top - sameAncestorForFocusElementAndWalkthrough.offsetTop;\n            sameAncestorForFocusElementAndWalkthrough = sameAncestorForFocusElementAndWalkthrough.offsetParent;\n        }\n        return { top: top, left: left, height: height, width: width };\n    };\n    WalkthroughComponent.prototype.getSameAncestor = function (focusElement) {\n        var retval = null;\n        var walkthroughElementParent = this.element.nativeElement.offsetParent;\n        var focusElementParent = focusElement.offsetParent;\n        var walkthroughAncestorIter = walkthroughElementParent;\n        var focusElementAncestorIter = focusElementParent;\n        while (walkthroughAncestorIter && !retval) {\n            focusElementAncestorIter = focusElementParent;\n            while (focusElementAncestorIter && !retval) {\n                if (focusElementAncestorIter === walkthroughAncestorIter) {\n                    retval = walkthroughAncestorIter;\n                }\n                else {\n                    focusElementAncestorIter = focusElementAncestorIter.offsetParent;\n                }\n            }\n            walkthroughAncestorIter = walkthroughAncestorIter.offsetParent;\n        }\n        return retval;\n    };\n    ;\n    WalkthroughComponent.prototype.setIconAndText = function (iconLeft, iconTop, paddingLeft, paddingTop) {\n        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughIconElement);\n        var iconHeight = offsetCoordinates.height;\n        var iconWidth = offsetCoordinates.width;\n        var iconLeftWithPadding = iconLeft + paddingLeft - (iconWidth / 4);\n        var iconTopWithPadding = iconTop + paddingTop - (iconHeight / 6);\n        var iconRight = iconLeftWithPadding + iconWidth;\n        var iconBottom = iconTopWithPadding + iconHeight;\n        if (this.forceCaptionLocation === undefined && this.isItemOnText(iconLeftWithPadding, iconTopWithPadding, iconRight, iconBottom)) {\n            this.forceCaptionLocation = \"BOTTOM\";\n        }\n        var iconLocation = \"position: absolute;\" +\n            \"left:\" + iconLeftWithPadding + \"px;\" +\n            \"top:\" + iconTopWithPadding + \"px;\";\n        this.walkthroughIconElement.setAttribute('style', iconLocation);\n    };\n    ;\n    WalkthroughComponent.prototype.setElementLocations = function () {\n        var _this = this;\n        var focusElement = (this.focusElementSelector) ? document.querySelectorAll(this.focusElementSelector) : null;\n        if (focusElement && focusElement.length > 0) {\n            if (focusElement.length > 1) {\n                console.warn('Multiple items fit selector, displaying first visible as focus item');\n            }\n        }\n        else {\n            console.error('No element found with selector: ' + this.focusElementSelector);\n            focusElement = null;\n        }\n        var htmlElement = focusElement[0];\n        if (htmlElement) {\n            var offsetCoordinates = this.getOffsetCoordinates(htmlElement);\n            var width_1 = offsetCoordinates.width;\n            var height_1 = offsetCoordinates.height;\n            var left_1 = offsetCoordinates.left;\n            var top_1 = offsetCoordinates.top;\n            this.setFocus(left_1, top_1, width_1, height_1);\n            var paddingLeft_1 = parseFloat(this.iconPaddingLeft);\n            var paddingTop_1 = parseFloat(this.iconPaddingTop);\n            if (!paddingLeft_1) {\n                paddingLeft_1 = 0;\n            }\n            if (!paddingTop_1) {\n                paddingTop_1 = 0;\n            }\n            if (this.walkthroughIconWanted && this.walkthroughIconWanted !== \"arrow\" && this.walkthroughType === \"transparency\") {\n                setTimeout(function () {\n                    _this.setIconAndText(left_1 + width_1 / 2, top_1 + height_1 / 2, paddingLeft_1, paddingTop_1);\n                }, 200);\n            }\n            if (this.walkthroughIconWanted === \"arrow\") {\n                setTimeout(function () {\n                    _this.setArrowAndText(left_1, top_1 + paddingTop_1, width_1, height_1, paddingLeft_1);\n                }, 200);\n            }\n            if (this.walkthroughType === \"tip\" &&\n                this.walkthroughIconWanted && this.walkthroughIconWanted.length > 0 &&\n                (this.iconPaddingLeft || this.iconPaddingTop)) {\n                this.setTipIconPadding(this.iconPaddingLeft, this.iconPaddingTop);\n            }\n        }\n        else {\n            if (this.focusElementSelector) {\n                console.info('Unable to find element requested to be focused: ' + this.focusElementSelector);\n            }\n            else {\n                if (this.walkthroughType === \"tip\" &&\n                    this.walkthroughIconWanted && this.walkthroughIconWanted.length > 0 &&\n                    (this.iconPaddingLeft || this.iconPaddingTop)) {\n                    this.setTipIconPadding(this.iconPaddingLeft, this.iconPaddingTop);\n                }\n            }\n        }\n    };\n    WalkthroughComponent.prototype.setFocus = function (left, top, width, height) {\n        var holeDimensions = \"left:\" + (left - this.PADDING_HOLE) + \"px;\" +\n            \"top:\" + (top - this.PADDING_HOLE) + \"px;\" +\n            \"width:\" + (width + (2 * this.PADDING_HOLE)) + \"px;\" +\n            \"height:\" + (height + (2 * this.PADDING_HOLE)) + \"px;\";\n        if (this.walkthroughHoleElements) {\n            this.walkthroughHoleElements.setAttribute('style', holeDimensions);\n        }\n    };\n    ;\n    WalkthroughComponent.prototype.setFocusOnElement = function () {\n        this.setElementLocations();\n    };\n    WalkthroughComponent.prototype.onWalkthroughContentClicked = function () {\n        this.onWalkthroughContentClickedEvent.emit();\n    };\n    WalkthroughComponent.prototype.setTipIconPadding = function (iconPaddingLeft, iconPaddingTop) {\n        var iconLocation = \"\";\n        if (iconPaddingTop) {\n            iconLocation += \"margin-top:\" + iconPaddingTop + \"px;\";\n        }\n        if (iconPaddingLeft) {\n            iconLocation += \"right:\" + iconPaddingLeft + \"%;\";\n        }\n        this.walkthroughIconElement.setAttribute('style', iconLocation);\n    };\n    ;\n    WalkthroughComponent.prototype.onCloseClicked = function (event) {\n        if ((!this.useButton) ||\n            (event.currentTarget.className.indexOf(this.DOM_WALKTHROUGH_DONE_BUTTON_CLASS) > -1)) {\n            this.closeWalkthrough();\n        }\n    };\n    WalkthroughComponent.prototype.closeWalkthrough = function () {\n        this.onWalkthroughHideEvent.emit();\n        var arrowElement = this.element.nativeElement.querySelector(this.DOM_WALKTHROUGH_ARROW_CLASS);\n        if (arrowElement.children.length > 0) {\n            arrowElement.children[0].remove();\n        }\n        this.isVisible = false;\n    };\n    ;\n    __decorate([\n        Input(\"walkthrough-type\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"walkthroughType\", void 0);\n    __decorate([\n        Input(\"button-caption\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"buttonCaption\", void 0);\n    __decorate([\n        Input(\"use-button\"),\n        __metadata(\"design:type\", Boolean)\n    ], WalkthroughComponent.prototype, \"useButton\", void 0);\n    __decorate([\n        Input(\"main-caption\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"mainCaption\", void 0);\n    __decorate([\n        Input(\"icon\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"walkthroughIconWanted\", void 0);\n    __decorate([\n        Input(\"walkthrough-hero-image\"),\n        __metadata(\"design:type\", Object)\n    ], WalkthroughComponent.prototype, \"walkthroughHeroImage\", void 0);\n    __decorate([\n        Input(\"has-glow\"),\n        __metadata(\"design:type\", Boolean)\n    ], WalkthroughComponent.prototype, \"hasGlow\", void 0);\n    __decorate([\n        Input(\"force-caption-location\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"forceCaptionLocation\", void 0);\n    __decorate([\n        Input(\"has-backdrop\"),\n        __metadata(\"design:type\", Boolean)\n    ], WalkthroughComponent.prototype, \"hasBackdrop\", void 0);\n    __decorate([\n        Input(\"is-round\"),\n        __metadata(\"design:type\", Boolean)\n    ], WalkthroughComponent.prototype, \"isRound\", void 0);\n    __decorate([\n        Input(\"icon-padding-left\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"iconPaddingLeft\", void 0);\n    __decorate([\n        Input(\"icon-padding-top\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"iconPaddingTop\", void 0);\n    __decorate([\n        Input(\"tip-icon-location\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"tipIconLocation\", void 0);\n    __decorate([\n        Input(\"tip-color\"),\n        __metadata(\"design:type\", String)\n    ], WalkthroughComponent.prototype, \"tipColor\", void 0);\n    __decorate([\n        Input(\"focus-element-selector\"),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], WalkthroughComponent.prototype, \"focusElementSelector\", null);\n    __decorate([\n        Input(\"is-active\"),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], WalkthroughComponent.prototype, \"isActive\", null);\n    __decorate([\n        Output(\"on-walkthrough-show\"),\n        __metadata(\"design:type\", Object)\n    ], WalkthroughComponent.prototype, \"onWalkthroughShowEvent\", void 0);\n    __decorate([\n        Output(\"on-walkthrough-hide\"),\n        __metadata(\"design:type\", Object)\n    ], WalkthroughComponent.prototype, \"onWalkthroughHideEvent\", void 0);\n    __decorate([\n        Output(\"on-walkthrough-content-clicked\"),\n        __metadata(\"design:type\", Object)\n    ], WalkthroughComponent.prototype, \"onWalkthroughContentClickedEvent\", void 0);\n    __decorate([\n        HostListener('window:resize', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], WalkthroughComponent.prototype, \"onResize\", null);\n    WalkthroughComponent = __decorate([\n        Component({\n            selector: 'walkthrough',\n            template: \"\\n    <div class=\\\"{{DOM_WALKTHROUGH_CLASS}}\\\" [hidden]=\\\"!isVisible\\\" [ngClass]=\\\"{'walkthrough-active': isVisible}\\\" (click)=\\\"onCloseClicked($event)\\\">\\n      <div class=\\\"walkthrough-container walkthrough-container-transparency\\\" [hidden]=\\\"walkthroughType!=='transparency'\\\">\\n        <div class=\\\"walkthrough-inner\\\">\\n          <div class=\\\"{{DOM_TRANSCLUDE}}\\\">\\n            <ng-content select=\\\"img\\\"></ng-content>\\n          </div>\\n          <div class=\\\"walkthrough-non-transclude-template\\\" [hidden]=\\\"hasTransclude\\\">\\n            <div class=\\\"walkthrough-text-container\\\" [ngClass]=\\\"{'walkthrough-top': (!forceCaptionLocation || forceCaptionLocation==='TOP'), 'walkthrough-bottom': forceCaptionLocation==='BOTTOM'}\\\">\\n              <pre class=\\\"walkthrough-element walkthrough-text\\\" [innerHTML]=\\\"mainCaption\\\"></pre>\\n              <img *ngIf=\\\"walkthroughHeroImage\\\" class=\\\"walkthrough-element walkthrough-hero-image\\\" src=\\\"{{walkthroughHeroImage}}\\\" (click)=\\\"onWalkthroughContentClicked()\\\">\\n            </div>\\n            <img class=\\\"walkthrough-element walkthrough-icon\\\" [hidden]=\\\"walkthroughIconWanted && walkthroughIconWanted==='arrow'\\\" src=\\\"{{walkthroughIcon}}\\\">\\n            <div class=\\\"walkthrough-element walkthrough-arrow\\\" [hidden]=\\\"walkthroughIconWanted!=='arrow'\\\"></div>\\n            <button class=\\\"walkthrough-element walkthrough-button-positive walkthrough-done-button\\\" type=\\\"button\\\" *ngIf=\\\"useButton\\\" (click)=\\\"onCloseClicked($event)\\\">\\n              {{buttonCaption}}\\n            </button>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"walkthrough-container walkthrough-container-tip\\\" [hidden]=\\\"walkthroughType!=='tip'\\\">\\n        <div class=\\\"walkthrough-inner\\\" [ngClass]=\\\"{'walkthrough-top': ((!forceCaptionLocation && !tipLocation) || forceCaptionLocation==='TOP' || tipLocation =='TOP'), 'walkthrough-bottom': (forceCaptionLocation=='BOTTOM' || tipLocation =='BOTTOM')}\\\">\\n          <img class=\\\"walkthrough-element walkthrough-tip-icon-text-box\\\" [ngClass]=\\\"{'walkthrough-tip-icon-image-front': tipIconLocation==='FRONT', 'walkthrough-tip-icon-image-back': tipIconLocation=='BACK'}\\\"\\n            [hidden]=\\\"walkthroughIconWanted && walkthroughIconWanted==='arrow'\\\" src=\\\"{{walkthroughIcon}}\\\" alt=\\\"icon\\\">\\n          <button class=\\\"walkthrough-done-button walkthrough-tip-done-button-text-box\\\" [ngClass]=\\\"{'walkthrough-tip-done-button-no-icon': !icon}\\\"\\n            type=\\\"button\\\" *ngIf=\\\"useButton\\\" (click)=\\\"onCloseClicked($event)\\\">\\n            <img class=\\\"walkthrough-tip-button-image-text-box\\\" src=\\\"{{closeIcon}}\\\" alt=\\\"x\\\">\\n          </button>\\n          <div class=\\\"walkthrough-element walkthrough-tip-text-box\\\" (click)=\\\"onWalkthroughContentClicked()\\\" [ngClass]=\\\"{'walkthrough-tip-text-box-color-black': tipColor=='BLACK', 'walkthrough-tip-text-box-color-white': tipColor=='WHITE'}\\\">\\n            <pre [innerHTML]=\\\"mainCaption\\\"></pre>\\n            <img *ngIf=\\\"walkthroughHeroImage\\\" class=\\\"walkthrough-element walkthrough-hero-image\\\" src=\\\"{{walkthroughHeroImage}}\\\">\\n            <div class=\\\"{{DOM_TRANSCLUDE}}\\\">\\n              <ng-content select=\\\"img\\\"></ng-content>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div [hidden]=\\\"!hasBackdrop\\\" class=\\\"walkthrough-hole\\\" [ngClass]=\\\"{'walkthrough-hole-round': isRound}\\\">\\n      </div>\\n      <div [hidden]=\\\"!(hasGlow && (focusElementSelector))\\\" class=\\\"walkthrough-hole walkthrough-hole-glow\\\" [ngClass]=\\\"{'walkthrough-hole-round': isRound}\\\">\\n      </div>\\n    </div>\\n  \"\n        }),\n        __metadata(\"design:paramtypes\", [ElementRef])\n    ], WalkthroughComponent);\n    return WalkthroughComponent;\n}());\nexport { WalkthroughComponent };\n"],"file":"walkthrough.js"}